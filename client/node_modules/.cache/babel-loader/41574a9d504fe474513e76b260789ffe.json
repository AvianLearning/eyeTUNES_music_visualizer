{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/maria/Desktop/codeclan/codeclan_work/week_15_JS_React_Project/music_visualizer/client/src/containers/Play.js\",\n    _s = $RefreshSig$();\n\nimport * as Tone from 'tone';\nimport Instrument from '../containers/Instrument.js';\nimport SongForm from '../components/SongForm.js';\nimport Visual from '../containers/Visual.js';\nimport { useState, useEffect } from 'react';\nimport UserPlaylist from '../components/UserPlaylist.js';\n\nconst Play = ({\n  addPlaylist,\n  playlist,\n  onDeleteSubmit5\n}) => {\n  _s();\n\n  const [song, setSong] = useState([]);\n  const [currentSong, setCurrentSong] = useState([]);\n  const [lastKey, setLastKey] = useState(\"\");\n  const [playState, setPlayState] = useState(false);\n  const [isPlayingSong, setIsPlayingSong] = useState(false);\n  const [placeInSong, setPlaceInSong] = useState(0);\n  const [lastTimeout, setLastTimeout] = useState(null);\n  const [keyMap, setKeyMap] = useState({\n    \"a\": {\n      keyPress: \"a\",\n      note: \"C4\",\n      color: \"red\",\n      shape: \"50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180\",\n      beat: \"8n\"\n    },\n    \"s\": {\n      keyPress: \"s\",\n      note: \"D4\",\n      color: \"blue\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"d\": {\n      keyPress: \"d\",\n      note: \"E4\",\n      color: \"yellow\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"f\": {\n      keyPress: \"f\",\n      note: \"F4\",\n      color: \"green\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"g\": {\n      keyPress: \"g\",\n      note: \"G4\",\n      color: \"antiquewhite\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"h\": {\n      keyPress: \"h\",\n      note: \"A5\",\n      color: \"violet\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"j\": {\n      keyPress: \"j\",\n      note: \"B5\",\n      color: \"greenyellow\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"k\": {\n      keyPress: \"k\",\n      note: \"C5\",\n      color: \"purple\",\n      shape: \"circle\",\n      beat: \"8n\"\n    },\n    \"l\": {\n      keyPress: \"l\",\n      note: \"D5\",\n      color: \"lightcoral\",\n      shape: \"circle\",\n      beat: \"8n\"\n    }\n  });\n  useEffect(() => {\n    document.addEventListener('keydown', ({\n      key\n    }) => playKey(key));\n  }, []); // this useEffect saves an array of lastKeys played in the songState.\n\n  useEffect(() => {\n    if (!isPlayingSong && lastKey.length === 1) {\n      setSong([...song, lastKey]);\n    }\n  }, [lastKey]);\n  const synth = new Tone.Synth().toDestination();\n\n  const playKey = function (key) {\n    if (!Object.keys(keyMap).includes(key)) return;\n    const {\n      note,\n      beat\n    } = keyMap[key];\n    synth.triggerAttackRelease(note, beat);\n    setLastKey(key);\n    setTimeout(() => setLastKey(\"\"), 250);\n  };\n\n  const addFormSong = formSong => {\n    const newSong = {\n      songData: song\n    };\n    const newMusicItem = { ...formSong,\n      songData: song\n    };\n    addPlaylist(newMusicItem);\n    setCurrentSong(newSong.songData);\n    setSong([]);\n  };\n\n  const replaySong = (song, index = 0, time = 350) => {\n    if (index >= song.length) {\n      setIsPlayingSong(false);\n      setPlayState(false);\n      return;\n    }\n\n    const currentKey = song[index];\n    playKey(currentKey);\n    setPlaceInSong(index + 1);\n    setLastTimeout(setTimeout(() => replaySong(song, index + 1), time));\n  };\n\n  useEffect(() => {\n    if (isPlayingSong && playState) {\n      replaySong(currentSong, placeInSong);\n    } else if (!playState) {\n      clearTimeout(lastTimeout);\n    } else if (playState) {\n      setIsPlayingSong(true);\n      replaySong(currentSong);\n    }\n  }, [playState]);\n\n  const handlePauseResumeClick = evt => {\n    setPlayState(!isPlayingSong || !playState);\n  };\n\n  const onDeleteSubmit4 = id => {\n    onDeleteSubmit5(id);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" This is the Play container\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Visual, {\n      lastKey: lastKey,\n      pads: keyMap\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Instrument, {\n      pads: keyMap,\n      onKeyClick: playKey,\n      lastKey: lastKey\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(UserPlaylist, {\n      playlist: playlist,\n      onDeleteSubmit3: id => onDeleteSubmit4(id),\n      onReplaySaveSong: data => replaySong(data)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SongForm, {\n      onFormSubmit: songForm => addFormSong(songForm)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePauseResumeClick,\n      children: playState && isPlayingSong ? \"Pause\" : \"Play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Play, \"fdQY8eEHBImwfg4zOuZDL74DqAU=\");\n\n_c = Play;\nexport default Play;\n\nvar _c;\n\n$RefreshReg$(_c, \"Play\");","map":{"version":3,"sources":["/Users/maria/Desktop/codeclan/codeclan_work/week_15_JS_React_Project/music_visualizer/client/src/containers/Play.js"],"names":["Tone","Instrument","SongForm","Visual","useState","useEffect","UserPlaylist","Play","addPlaylist","playlist","onDeleteSubmit5","song","setSong","currentSong","setCurrentSong","lastKey","setLastKey","playState","setPlayState","isPlayingSong","setIsPlayingSong","placeInSong","setPlaceInSong","lastTimeout","setLastTimeout","keyMap","setKeyMap","keyPress","note","color","shape","beat","document","addEventListener","key","playKey","length","synth","Synth","toDestination","Object","keys","includes","triggerAttackRelease","setTimeout","addFormSong","formSong","newSong","songData","newMusicItem","replaySong","index","time","currentKey","clearTimeout","handlePauseResumeClick","evt","onDeleteSubmit4","id","data","songForm"],"mappings":"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","sourcesContent":["import * as Tone from 'tone'\nimport Instrument from '../containers/Instrument.js'\nimport SongForm from '../components/SongForm.js'\nimport Visual from '../containers/Visual.js'\nimport {useState, useEffect} from 'react'\nimport UserPlaylist from '../components/UserPlaylist.js'\n\n\nconst Play =({addPlaylist, playlist,  onDeleteSubmit5}) => {\n   \n    const [song, setSong] = useState([])\n    const [currentSong, setCurrentSong] = useState([])\n    const [lastKey, setLastKey] = useState(\"\")\n\n    const [playState, setPlayState] = useState(false)\n    const [isPlayingSong, setIsPlayingSong] = useState(false)\n    const [placeInSong, setPlaceInSong] = useState(0)\n    const [lastTimeout, setLastTimeout] = useState(null)\n    \n    const [keyMap, setKeyMap] = useState({\n        \"a\": {keyPress: \"a\", note: \"C4\", color: \"red\", shape: \"50, 160 55, 180 70, 180 60, 190 65, 205 50, 195 35, 205 40, 190 30, 180 45, 180\", beat:\"8n\"},\n        \"s\": {keyPress: \"s\", note: \"D4\", color: \"blue\", shape: \"circle\", beat:\"8n\"},\n        \"d\": {keyPress: \"d\", note: \"E4\", color: \"yellow\", shape: \"circle\", beat:\"8n\"},\n        \"f\": {keyPress: \"f\", note: \"F4\", color: \"green\", shape: \"circle\", beat:\"8n\"},\n        \"g\": {keyPress: \"g\", note: \"G4\", color: \"antiquewhite\", shape: \"circle\", beat:\"8n\"},\n        \"h\": {keyPress: \"h\", note: \"A5\", color: \"violet\", shape: \"circle\", beat:\"8n\"},\n        \"j\": {keyPress: \"j\", note: \"B5\", color: \"greenyellow\", shape: \"circle\", beat:\"8n\"},\n        \"k\": {keyPress: \"k\", note: \"C5\", color: \"purple\", shape: \"circle\", beat:\"8n\"},\n        \"l\": {keyPress: \"l\", note: \"D5\", color: \"lightcoral\", shape: \"circle\", beat:\"8n\"}\n    })\n\n    useEffect(() => {\n        document.addEventListener('keydown', ({ key }) => playKey(key))\n    }, [])\n\n    // this useEffect saves an array of lastKeys played in the songState.\n    useEffect(() => {\n        if(!isPlayingSong && lastKey.length === 1 ){ \n            setSong([...song, lastKey]);\n        }\n    }, [lastKey])\n\n    const synth = new Tone.Synth().toDestination();\n\n    const playKey = function(key) {\n        if (!Object.keys(keyMap).includes(key)) return;\n        const { note, beat } = keyMap[key]\n        synth.triggerAttackRelease(note, beat)\n        setLastKey(key)\n        setTimeout(() => setLastKey(\"\"), 250)\n    }\n\n    const addFormSong = (formSong) => {\n        \n        const newSong = {songData: song}\n        const newMusicItem = {...formSong, songData:song}\n        addPlaylist(newMusicItem)\n        setCurrentSong(newSong.songData)\n        setSong([])\n    }\n\n    const replaySong = (song, index=0, time=350) => {\n        if (index >= song.length) {\n            setIsPlayingSong(false)\n            setPlayState(false)\n            return;\n        }\n\n        const currentKey = song[index]\n        playKey(currentKey)\n\n        setPlaceInSong(index + 1)\n        setLastTimeout(setTimeout(() => replaySong(song, index + 1), time))\n    }\n\n    useEffect(() => {\n        if (isPlayingSong && playState) {\n            replaySong(currentSong, placeInSong)\n        } else if (!playState) {\n            clearTimeout(lastTimeout)\n        } else if (playState) {\n            setIsPlayingSong(true) \n            replaySong(currentSong)\n        } \n    }, [playState])\n\n    const handlePauseResumeClick = (evt) => {\n        setPlayState((!isPlayingSong || !playState))\n    } \n\n    const onDeleteSubmit4 = (id) => {\n        onDeleteSubmit5 (id)\n    }\n\n    return(\n        <>\n            <h1> This is the Play container</h1>\n            <Visual lastKey={lastKey} pads={keyMap} />\n            <Instrument pads={keyMap} onKeyClick={playKey} lastKey={lastKey} />\n            <UserPlaylist playlist={playlist}  onDeleteSubmit3={(id) => onDeleteSubmit4(id)} onReplaySaveSong ={(data) => replaySong(data)} ></UserPlaylist>\n            \n            <SongForm onFormSubmit= {(songForm) => addFormSong(songForm)}></SongForm>\n\n            <button onClick={handlePauseResumeClick}>{(playState && isPlayingSong) ? \"Pause\" : \"Play\"}</button>\n        </>\n    )\n}\n\nexport default Play\n"]},"metadata":{},"sourceType":"module"}